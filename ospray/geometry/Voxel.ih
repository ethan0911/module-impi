// ======================================================================== //
// Copyright 2009-2017 Intel Corporation                                    //
//                                                                          //
// Licensed under the Apache License, Version 2.0 (the "License");          //
// you may not use this file except in compliance with the License.         //
// You may obtain a copy of the License at                                  //
//                                                                          //
//     http://www.apache.org/licenses/LICENSE-2.0                           //
//                                                                          //
// Unless required by applicable law or agreed to in writing, software      //
// distributed under the License is distributed on an "AS IS" BASIS,        //
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. //
// See the License for the specific language governing permissions and      //
// limitations under the License.                                           //
// ======================================================================== //

/*! implements the base concept of a voxel, and the corresponding
  ay-voxel iso-surface intersection */

#pragma once

#include "Bezier.ih"
#include "Polynomial.ih"

struct Voxel {
  float vtx[2][2][2];
};

/*! perform trilinear interpolation at position P */
inline float lerp(const uniform Voxel &voxel, const vec3f &P)
{
  const float f00x = (1.f-P.x) * voxel.vtx[0][0][0] + (P.x) * voxel.vtx[0][0][1];
  const float f01x = (1.f-P.x) * voxel.vtx[0][1][0] + (P.x) * voxel.vtx[0][1][1];
  const float f10x = (1.f-P.x) * voxel.vtx[1][0][0] + (P.x) * voxel.vtx[1][0][1];
  const float f11x = (1.f-P.x) * voxel.vtx[1][1][0] + (P.x) * voxel.vtx[1][1][1];
  
  const float f0yx = (1.f-P.y) * f00x + (P.y) * f01x;
  const float f1yx = (1.f-P.y) * f10x + (P.y) * f11x;
  
  const float fzyx = (1.f-P.z) * f0yx + (P.z) * f1yx;

  return fzyx;
}

/*! compute gradient at position */
inline vec3f gradient(const uniform Voxel &voxel, const vec3f &P)
{
  const float x0 = (1.f-P.x);
  const float x1 = P.x;

  const float y0 = (1.f-P.y);
  const float y1 = P.y;

  const float z0 = (1.f-P.z);
  const float z1 = P.z;

  vec3f N;
  N.x
    = (z0*y0*voxel.vtx[0][0][1]+
       z0*y1*voxel.vtx[0][1][1]+
       z1*y0*voxel.vtx[1][0][1]+
       z1*y1*voxel.vtx[1][1][1])
    - (z0*y0*voxel.vtx[0][0][0]+
       z0*y1*voxel.vtx[0][1][0]+
       z1*y0*voxel.vtx[1][0][0]+
       z1*y1*voxel.vtx[1][1][0]);
  N.y
    = (z0*x0*voxel.vtx[0][1][0]+
       z0*x1*voxel.vtx[0][1][1]+
       z1*x0*voxel.vtx[1][1][0]+
       z1*x1*voxel.vtx[1][1][1])
    - (z0*x0*voxel.vtx[0][0][0]+
       z0*x1*voxel.vtx[0][0][1]+
       z1*x0*voxel.vtx[1][0][0]+
       z1*x1*voxel.vtx[1][0][1]);
  N.z
    = (x0*y0*voxel.vtx[1][0][0]+
       x0*y1*voxel.vtx[1][1][0]+
       x1*y0*voxel.vtx[1][0][1]+
       x1*y1*voxel.vtx[1][1][1])
    - (x0*y0*voxel.vtx[0][0][0]+
       x0*y1*voxel.vtx[0][1][0]+
       x1*y0*voxel.vtx[0][0][1]+
       x1*y1*voxel.vtx[0][1][1]);
  return N;
}

/*! helper function that performs a ray-box test */
inline void intersectUnitBox(const Ray& ray,
                             float& t0,
                             float& t1)
{
  const vec3f mins = (make_vec3f(0.f) - ray.org) * rcp(ray.dir);
  const vec3f maxs = (make_vec3f(1.f) - ray.org) * rcp(ray.dir);
  t0 = reduce_max(make_vec4f(min(mins, maxs), ray.t0));
  t1 = reduce_min(make_vec4f(max(mins, maxs), ray.t));
}

inline vec3f getPoint(const Ray &ray, const float t)
{
  return ray.org + t * ray.dir;
}


/*! compute 1D bezier representation of fct along the ray */
inline Hermite computeHermite(const uniform Voxel &voxel, const vec3f &P0, const vec3f &P1)
{
  Hermite hermite;
  hermite.v0 = lerp(voxel,P0);
  hermite.v1 = lerp(voxel,P1);
  const vec3f N0 = gradient(voxel,P0);
  const vec3f N1 = gradient(voxel,P1);
  hermite.dv0 = dot(N0,P1-P0);
  hermite.dv1 = dot(N1,P1-P0);
  return hermite;
}

inline bool unitVoxelIntersect(Ray &ray,
                               const uniform Voxel &voxel,
                               const uniform float isoValue)
{
  float t0, t1;
  intersectUnitBox(ray,t0,t1);

  if (t0 > t1) return false;

  const Hermite hermite = sub(computeHermite(voxel,getPoint(ray,t0),getPoint(ray,t1)),isoValue);
  
#if 0
  const Poly3 poly = toPoly(hermite);
  return findRoot(ray.t,poly,t0,t1);
#else
  const Bezier bezier = toBezier(hermite);
  // float t;
  return findRoot(ray.t,bezier,t0,t1);
#endif
}

